//quick vfd tube driver test - version 3j3b - 09.08.2016
// MAX6921 -> datasheet: http://datasheets.maximintegrated.com/en/ds/MAX6921-MAX6931.pdf
// original sketch from https://github.com/echox/arduino-test/blob/master/max6921.ino
// current sketch by Nicu FLORICA (aka niq_ro): http://www.tehnic.go.ro
// & http://www.arduinotehniq.com/


int clk = 3;
int load = 5;
int din = 4;
int led = 13;
int blank = 7;

int pauza = 0;


byte zero[20]=
{1,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
0,
0,
1,
1,
1};



byte unu[20] = {1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
0,
0,
0,
1,
0};

byte doi[20] =
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
1,
1,
0,
1,
1};

byte trei[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
1,
0,
0,
1,
1};

byte patru[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
1,
1,
1,
0};

byte cinci[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
1,
1,
1,
0,
1};

byte cincim[20]=
{0,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
1,
0,
0,
0,
1,
1,
0,
1};

byte sase[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
1,
1,
0,
1};

byte sapte[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
0,
0,
0,
1,
1};

byte opt[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
1,
1,
1,
1};

byte noua[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
1,
1,
1,
1,
1};

byte literaA[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
1,
1,
1};

byte literaB[20]=
{0,
1,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
1,
1,
0,
1,
0,
0,
1,
1};

byte literaC[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
0,
0,
1,
0,
1};

byte literaD[20]=
{0,
1,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
1,
1,
0,
0,
0,
0,
1,
1};

byte literaE[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
0,
1,
1,
0,
1};

byte literaF[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
1,
0,
1};

byte literaG[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
0,
1,
0,
1};

byte literaH[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
1,
1,
0};

byte literaI[20]=
{0,
1,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
1};

byte literaJ[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
0,
0,
0,
1,
0};

byte literaK[20]=
{1,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
1,
0,
0};

byte literaL[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
0,
0,
1,
0,
0};

byte literaM[20]=
{1,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
0,
1,
1,
0};

byte literaN[20]=
{0,
0,
1,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
0,
1,
1,
0};

byte literaO[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
0,
0,
1,
1,
1};

byte literaP[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
1,
1};

byte literaQ[20]=
{0,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
0,
0,
1,
1,
1};

byte literaR[20]=
{0,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
1,
1};

byte literaS[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
1,
1,
1,
0,
1};

byte literaT[20]=
{0,
1,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1};

byte literaU[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
0,
0,
1,
1,
0};

byte literaV[20]=
{1,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
0,
1,
0,
0};

byte literaW[20]=
{0,
0,
0,
1,
1,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
0,
1,
1,
0};

byte literaX[20]=
{1,
0,
1,
1,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0};

byte literaY[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
0,
0,
1,
1,
1};

byte litezaZ[20]=
{1,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
1};


byte gol[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0};

byte minus[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
0,
0};

byte plus[20]=
{0,
1,
0,
0,
0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
0,
0,
0};

byte grad[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
1,
1,
1,
1};

byte arond[20]=
{0,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
1,
1,
0,
1,
1,
1};

byte egal[20]=
{0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
0,
1,
1,
0,
0,
0};


int timpceas = 200;
int timpzi = 200;

byte ora, oraz, orau;
byte minut, minutz, minutu;
byte secunda, secundaz, secundau;
int temperatura;
byte temperaturaz, temperaturau, temperaturas;
byte umiditate, umiditatez, umiditateu;
byte zil, zilz, zilu, zis, luna;


void setup() {                
  pinMode(din, OUTPUT);
  pinMode(load, OUTPUT);
  pinMode(clk, OUTPUT);  
  pinMode(led, OUTPUT);
  
  pinMode(blank, OUTPUT);
  digitalWrite(blank, HIGH);
  delay(500); 
  digitalWrite(blank, LOW);
  
  digitalWrite(clk, LOW);
  digitalWrite(load, LOW);
  digitalWrite(din, LOW);
  

}

// the loop routine runs over and over again forever:
void loop() {

ora = random(24);
minut = random(60);
secunda = random(60);
temperatura = random(400);
umiditate = random(80);

zis = random(7) + 1;
luna = random(12) + 1;
zil = random(30) + 1;

// compute each digit value
// hour
oraz = ora/10;
orau = ora - 10*oraz;
// minute
minutz = minut/10;
minutu = minut - 10*minutz;
// seconds
secundaz = secunda/10;
secundau = secunda - 10*secundaz;
// temperature
temperaturaz = temperatura/100;
temperatura = temperatura - 100*temperaturaz;
temperaturau = temperatura/10;
temperaturas = temperatura - 10*temperaturau;
// humidity
umiditatez = umiditate/10;
umiditateu = umiditate - 10*umiditatez;

// day in mounth
zilz = zil/10;
zilu = zil - 10*zilz;


  
for(byte k=0; k < timpceas; k++) {
// clock -> 13-48-56

// put hour
// tens figure
//if (oraz == 0) afisare0(19, zero);
if (oraz == 0) afisare0(19, gol);
if (oraz == 1) afisare0(19, unu);
if (oraz == 2) afisare0(19, doi);
// put character of units
if (orau == 0) afisare0(18, zero);
if (orau == 1) afisare0(18, unu);
if (orau == 2) afisare0(18, doi);
if (orau == 3) afisare0(18, trei);
if (orau == 4) afisare0(18, patru);
if (orau == 5) afisare0(18, cinci);
if (orau == 6) afisare0(18, sase);
if (orau == 7) afisare0(18, sapte);
if (orau == 8) afisare0(18, opt);
if (orau == 9) afisare0(18, noua);

// put separator
afisare0(17, minus);

// minutes 
// tens figure
if (minutz == 0) afisare0(16, zero);
if (minutz == 1) afisare0(16, unu);
if (minutz == 2) afisare0(16, doi);
if (minutz == 3) afisare0(16, trei);
if (minutz == 4) afisare0(16, patru);
if (minutz == 5) afisare0(16, cinci);
// put character of units
if (minutu == 0) afisare0(15, zero);
if (minutu == 1) afisare0(15, unu);
if (minutu == 2) afisare0(15, doi);
if (minutu == 3) afisare0(15, trei);
if (minutu == 4) afisare0(15, patru);
if (minutu == 5) afisare0(15, cinci);
if (minutu == 6) afisare0(15, sase);
if (minutu == 7) afisare0(15, sapte);
if (minutu == 8) afisare0(15, opt);
if (minutu == 9) afisare0(15, noua);

// put separator
afisare0(14, minus);

// seconds 
// tens figure
if (secundaz == 0) afisare0(13, zero);
if (secundaz == 1) afisare0(13, unu);
if (secundaz == 2) afisare0(13, doi);
if (secundaz == 3) afisare0(13, trei);
if (secundaz == 4) afisare0(13, patru);
if (secundaz == 5) afisare0(13, cinci);
// put character of units
if (secundau == 0) afisare0(12, zero);
if (secundau == 1) afisare0(12, unu);
if (secundau == 2) afisare0(12, doi);
if (secundau == 3) afisare0(12, trei);
if (secundau == 4) afisare0(12, patru);
if (secundau == 5) afisare0(12, cinci);
if (secundau == 6) afisare0(12, sase);
if (secundau == 7) afisare0(12, sapte);
if (secundau == 8) afisare0(12, opt);
if (secundau == 9) afisare0(12, noua);

// free space
afisare0(11, gol);
afisare0(10, gol);

// temperature 20,5 gr.C
// tens figure
//if (temperaturaz == 0) afisare0(9, zero);
if (temperaturaz == 0) afisare0(9, gol);
if (temperaturaz == 1) afisare0(9, unu);
if (temperaturaz == 2) afisare0(9, doi);
if (temperaturaz == 3) afisare0(9, trei);
if (temperaturaz == 4) afisare0(9, patru);
if (temperaturaz == 5) afisare0(9, cinci);
if (temperaturaz == 6) afisare0(9, sase);
if (temperaturaz == 7) afisare0(9, sapte);
if (temperaturaz == 8) afisare0(9, opt);
if (temperaturaz == 9) afisare0(9, noua);
// put character of units
if (temperaturau == 0) afisare1(8, zero);
if (temperaturau == 1) afisare1(8, unu);
if (temperaturau == 2) afisare1(8, doi);
if (temperaturau == 3) afisare1(8, trei);
if (temperaturau == 4) afisare1(8, patru);
if (temperaturau == 5) afisare1(8, cinci);
if (temperaturau == 6) afisare1(8, sase);
if (temperaturau == 7) afisare1(8, sapte);
if (temperaturau == 8) afisare1(8, opt);
if (temperaturau == 9) afisare1(8, noua);
// number after point (comma)
if (temperaturas == 0) afisare0(7, zero);
if (temperaturas == 1) afisare0(7, unu);
if (temperaturas == 2) afisare0(7, doi);
if (temperaturas == 3) afisare0(7, trei);
if (temperaturas == 4) afisare0(7, patru);
if (temperaturas == 5) afisare0(7, cinci);
if (temperaturas == 6) afisare0(7, sase);
if (temperaturas == 7) afisare0(7, sapte);
if (temperaturas == 8) afisare0(7, opt);
if (temperaturas == 9) afisare0(7, noua);

// putdegree symbol
afisare0(6, grad);
// put C letter (for Celsius)
afisare0(5, literaC);

// free space
afisare0(4, gol);

// relative humidity
// tens figure
//if (temperaturaz == 0) afisare0(3, zero);
if (umiditatez == 0) afisare0(3, gol);
if (umiditatez == 1) afisare0(3, unu);
if (umiditatez == 2) afisare0(3, doi);
if (umiditatez == 3) afisare0(3, trei);
if (umiditatez == 4) afisare0(3, patru);
if (umiditatez == 5) afisare0(3, cinci);
if (umiditatez == 6) afisare0(3, sase);
if (umiditatez == 7) afisare0(3, sapte);
if (umiditatez == 8) afisare0(3, opt);
if (umiditatez == 9) afisare0(3, noua);
// put character of units
if (umiditateu == 0) afisare0(2, zero);
if (umiditateu == 1) afisare0(2, unu);
if (umiditateu == 2) afisare0(2, doi);
if (umiditateu == 3) afisare0(2, trei);
if (umiditateu == 4) afisare0(2, patru);
if (umiditateu == 5) afisare0(2, cinci);
if (umiditateu == 6) afisare0(2, sase);
if (umiditateu == 7) afisare0(2, sapte);
if (umiditateu == 8) afisare0(2, opt);
if (umiditateu == 9) afisare0(2, noua);

// put letters R, H
afisare0(1, literaR);
afisare0(0, literaH);
}


for(byte k=0; k < timpzi; k++) {

// put space
afisare0(19, gol);

// luni
if (zis == 1) {
afisare0(18, literaL);
afisare0(17, literaU);
afisare0(16, literaN);
afisare1(15, literaI);
afisare0(14, gol);
afisare0(13, gol);
afisare0(12, gol);
afisare0(11, gol);
}

// marti
if (zis == 2) {
afisare0(18, literaM);
afisare0(17, literaA);
afisare0(16, literaR);
afisare0(15, literaT);
afisare1(14, literaI);
afisare0(13, gol);
afisare0(12, gol);
afisare0(11, gol);
}

// miercuri
if (zis == 3) {
afisare0(18, literaM);
afisare0(17, literaI);
afisare0(16, literaE);
afisare0(15, literaR);
afisare0(14, literaC);
afisare0(13, literaU);
afisare0(12, literaR);
afisare1(11, literaI);
}

// luni
if (zis == 4) {
afisare0(18, literaJ);
afisare0(17, literaO);
afisare1(16, literaI);
afisare0(15, gol);
afisare0(14, gol);
afisare0(13, gol);
afisare0(12, gol);
afisare0(11, gol);
}

// vineri
if (zis == 5) {
afisare0(18, literaV);
afisare0(17, literaI);
afisare0(16, literaN);
afisare0(15, literaE);
afisare0(14, literaR);
afisare1(13, literaI);
afisare0(12, gol);
afisare0(11, gol);
}

// sambata
if (zis == 6) {
afisare0(18, literaS);
afisare0(17, literaA);
afisare0(16, literaM);
afisare0(15, literaB);
afisare0(14, literaA);
afisare0(13, literaT);
afisare1(12, literaA);
afisare0(11, gol);
}

// duminica
if (zis == 7) {
afisare0(18, literaD);
afisare0(17, literaU);
afisare0(16, literaM);
afisare0(15, literaI);
afisare0(14, literaN);
afisare0(13, literaI);
afisare0(12, literaC);
afisare1(11, literaA);
}

// two spaces
afisare0(10, gol);
afisare0(9, gol);

// data (days in mounth)
// tens figure
//if (zilz == 0) afisare0(3, zero);
if (zilz == 0) afisare0(8, gol);
if (zilz == 1) afisare0(8, unu);
if (zilz == 2) afisare0(8, doi);
if (zilz == 3) afisare0(8, trei);
// put character of units
if (zilu == 0) afisare0(7, zero);
if (zilu == 1) afisare0(7, unu);
if (zilu == 2) afisare0(7, doi);
if (zilu == 3) afisare0(7, trei);
if (zilu == 4) afisare0(7, patru);
if (zilu == 5) afisare0(7, cinci);
if (zilu == 6) afisare0(7, sase);
if (zilu == 7) afisare0(7, sapte);
if (zilu == 8) afisare0(7, opt);
if (zilu == 9) afisare0(7, noua);

// two spaces
afisare0(6, gol);
afisare0(5, gol);


// mounth/luna
// ianuarie
if (luna == 1) {
afisare0(4, literaI);  
afisare0(3, literaA);
afisare0(2, literaN);
}
// februarie
if (luna == 2) {
afisare0(4, literaF);  
afisare0(3, literaE);
afisare0(2, literaB);
}
// martie
if (luna == 3) {
afisare0(4, literaM);  
afisare0(3, literaA);
afisare0(2, literaR);
}
// aprilie
if (luna == 4) {
afisare0(4, literaA);  
afisare0(3, literaP);
afisare0(2, literaR);
}
// mai
if (luna == 5) {
afisare0(4, literaM);  
afisare0(3, literaA);
afisare0(2, literaI);
}
// iunie
if (luna == 6) {
afisare0(4, literaI);  
afisare0(3, literaU);
afisare0(2, literaN);
}
// iulie
if (luna == 7) {
afisare0(4, literaI);  
afisare0(3, literaU);
afisare0(2, literaL);
}
// august
if (luna == 8) {
afisare0(4, literaA);  
afisare0(3, literaU);
afisare0(2, literaG);
}
// septembrie
if (luna == 9) {
afisare0(4, literaS);  
afisare0(3, literaE);
afisare0(2, literaP);
}
// octombrie
if (luna == 10) {
afisare0(4, literaO);  
afisare0(3, literaC);
afisare0(2, literaT);
}
// noiembrie
if (luna == 11) {
afisare0(4, literaN);  
afisare0(3, literaO);
afisare0(2, literaI);
}
// decembrie
if (luna == 12) {
afisare0(4, literaD);  
afisare0(3, literaE);
afisare0(2, literaC);
}


// put 2 spaces
afisare0(1, gol);
afisare0(0, gol);
}

} // end main loop

void afisare0 (byte pozitie, byte caracter[20]) {
   // first put position of character
    for(int i=0;i<20;i++) {
    if (i == pozitie) digitalWrite(din, 1);
    else  digitalWrite(din, 0);
     digitalWrite(clk, HIGH);
     digitalWrite(clk, LOW);
    }
    digitalWrite(clk, LOW);

// second put letter/character
  for(int i=19;i>=0;i--) {
     digitalWrite(din, caracter[i]); 
     digitalWrite(clk, HIGH);
     digitalWrite(clk, LOW);
    }
    digitalWrite(clk, LOW);

  // load the changes
    digitalWrite(load, HIGH);
    digitalWrite(load, LOW);
}

void afisare1 (byte pozitie, byte caracter[20]) {
   // first put position of character
    for(int i=0;i<20;i++) {
    if (i == pozitie) digitalWrite(din, 1);
    else  digitalWrite(din, 0);
     digitalWrite(clk, HIGH);
     digitalWrite(clk, LOW);
    }
    digitalWrite(clk, LOW);

// second put letter/character
  for(int i=19;i>=0;i--) {
     if (i == 7) digitalWrite(din, 1);    
     else 
     digitalWrite(din, caracter[i]); 
     digitalWrite(clk, HIGH);
     digitalWrite(clk, LOW);
    }
    digitalWrite(clk, LOW);

  // load the changes
    digitalWrite(load, HIGH);
    digitalWrite(load, LOW);
}
